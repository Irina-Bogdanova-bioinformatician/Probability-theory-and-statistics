import numpy as np
from sklearn.linear_model import LinearRegression
from matplotlib import pyplot as plt
from scipy import stats
import linear_regression_functions

""" Даны значения величины заработной платы заемщиков банка (salary) и значения их поведенческого кредитного
    скоринга (scoring):

    salary = [35, 45, 190, 200, 40, 70, 54, 150, 120, 110]
    scoring = [401, 574, 874, 919, 459, 739, 653, 902, 746, 832]

    Возьмём в качестве признака значение salary, а в качестве целевой переменной - scoring.

    Найдите коэффициенты линейной регрессии с помощью формул для парной регрессии, а затем с помощью метода
    наименьших квадратов.
    Постройте scatter plot по данным и отметьте на нём прямую линейной регрессии, полученную в п. 1.
    Посчитайте коэффициент детерминации.
    Оцените построенное уравнение регрессии с помощью F-критерия Фишера.
    Оцените значимость получившихся параметров уравнения регрессии и постройте для них доверительные интервалы
    с помощью t-статистики Стьюдента.
    (доп) Посчитать среднюю ошибку аппроксимации
"""

x = np.array([35, 45, 190, 200, 40, 70, 54, 150, 120, 110]).reshape((-1, 1))
x1 = np.array([35, 45, 190, 200, 40, 70, 54, 150, 120, 110])
y = np.array([401, 574, 874, 919, 459, 739, 653, 902, 746, 832])
model = LinearRegression().fit(x, y)
b0_, b1_ = model.intercept_, model.coef_
print(f"Коэффициенты линейной регрессии, найденные с помощью бибилотеки sklearn.linear_model: b0 = {b0_}, "
      f"b1 = {b1_[0]}")
b1 = (np.mean(x1 * y) - np.mean(x1) * np.mean(y)) / (np.mean(x1 ** 2) - np.mean(x1) ** 2)
b0 = np.mean(y) - b1 * np.mean(x1)
print(f"Коэффициенты линейной регрессии, найденные с помощью формул для парной регрессии: b0 = {b0}, "
      f"b1 = {b1}")
z = b0 + b1 * x1
r2 = 1 - ((y - z) ** 2).sum() / linear_regression_functions.sum_of_squares(y)
print("Коэффициент детерминации равен:", r2)
r2_ = model.score(x, y)
print("Коэффициент детерминации, рассчитанный с помощью встроенной функции, равен:", r2_)
n = x1.shape[0]
m = 1
k1 = m
k2 = n - m - 1
alpha = 0.05
t = stats.f.ppf(1 - alpha, k1, k2)
f = (r2 / k1) / ((1 - r2) / k2)
print(f"Критическая область: ({t}, +∞). Коэффициент Фишера для данной модели: {f}.\nСтатистика попадает в "
      f"критическую область, следовательно, получившееся уравнение регрессии является значимым")
s_slope = linear_regression_functions.standard_error_slope(x1, y, z)
t_student_b1 = b1 / s_slope       # H0: b1 ожидаемое = 0
print("t-критерий Стьюдента для b1 равен:", t_student_b1)
n = x1.shape[0]
t1 = stats.t.ppf(alpha / 2, df=n - 2)
t2 = stats.t.ppf(1 - alpha / 2, df=n - 2)
print(f"Критическая область:(-∞, {t1})u({t2}, +∞). t-критерий Стьюдента для b1 принадлежит критической области,"
      f"мы отвергаем гипотезу Н0 о том, что b1 = 0. Коэффициент линейной регрессии b1 значим")
b1_conf_int = (b1 + t1 * s_slope, b1 + t2 * s_slope)
print(f"Доверительный интервал для b1 равен: {b1_conf_int}. Интервал не содержит 0, это говорит о том, что вклад "
      f"фактора в общую регрессию значимый")
s_intercept = linear_regression_functions.standard_error_intercept(x1, y, z)
t_student_b0 = b0 / s_intercept      # H0: b0 ожидаемое = 0
print("t-критерий Стьюдента для b0 равен:", t_student_b0)
print(f"Критическая область:(-∞, {t1})u({t2}, +∞). t-критерий Стьюдента для b0 принадлежит критической области,"
      f"мы отвергаем гипотезу Н0 о том, что b0 = 0. Коэффициент линейной регрессии b0 значим")
b0_conf_int = (b0 + t1 * s_intercept, b0 + t2 * s_intercept)
print(f"Доверительный интервал для b0 равен: {b0_conf_int}")
ox = x1
oy = b0 + b1 * ox
plt.scatter(x1, y)
plt.plot(ox, oy, color='red', alpha=0.5)
plt.xlabel('Salary')
plt.ylabel('Scoring')
plt.show()
