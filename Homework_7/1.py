import numpy as np
import pandas as pd
import itertools
from scipy import stats

""" Дана матрица объект-признак
    X = [[ 1.22401313, 2.30868478, 3.03636353, 2.69287214],
    [-0.18757272, 1.30337355, 5.12093014, 3.46363202],
    [-0.81094525, 1.82463398, 5.79686488, 1.86159445],
    [ 0.75129018, 2.67392052, 3.65529809, 1.66746094],
    [ 0.00972362, 1.97367255, 2.50594319, 1.69755173],
    [-0.62972637, 0.77750764, 2.84124027, 4.54410559],
    [ 2.29536229, 1.81206697, 1.95026215, 1.51874636],
    [ 0.0920418 , 2.26971361, 7.47708735, 2.61081203],
    [ 2.39252799, 3.17563985, 3.61420599, 5.10773362],
    [ 0.54983815, 2.87988651, 1.65752765, 1.59635987]]

    и значения целевой переменной
    y = [ 9.26193358, 9.700363 , 8.67214805, 8.74796974, 6.18689108,
    7.53312713, 7.57643777, 12.44965478, 14.29010746, 6.68361218]

    Подберите два признака (из четырёх) так, чтобы уровень линейной зависимости целевой переменной от значений 
    этих признаков был максимальным. Другими словами, модель линейной регрессии на этих признаках должна давать 
    наилучший результат.
    Является ли значимым получившееся уравнение регрессии?

    Уровень значимости alpha = 0.05.
"""

new_array = [[1.22401313, 2.30868478, 3.03636353, 2.69287214], [-0.18757272, 1.30337355, 5.12093014, 3.46363202],
             [-0.81094525, 1.82463398, 5.79686488, 1.86159445], [0.75129018, 2.67392052, 3.65529809, 1.66746094],
             [0.00972362, 1.97367255, 2.50594319, 1.69755173], [-0.62972637, 0.77750764, 2.84124027, 4.54410559],
             [2.29536229, 1.81206697, 1.95026215, 1.51874636], [0.0920418, 2.26971361, 7.47708735, 2.61081203],
             [2.39252799, 3.17563985, 3.61420599, 5.10773362], [0.54983815, 2.87988651, 1.65752765, 1.59635987]]
y = pd.DataFrame([9.26193358, 9.700363, 8.67214805, 8.74796974, 6.18689108, 7.53312713, 7.57643777, 12.44965478,
                  14.29010746, 6.68361218])
x = pd.DataFrame(new_array)
a = [0, 1, 2, 3]
comb_of_indexes = list(itertools.combinations(a, 2))     # получаем лист комбинаций по 2 из индексов признаков
combination_dict = {}     # ключи - комбинации индексов признаков, значения - R2 для этих признаков
b_dict = {}  # ключи - комбинации индексов признаков, значения - b для этих признаков


def sum_of_squares(samples):
    return ((samples - samples.mean()) ** 2).sum()


for i in comb_of_indexes:
    el = list(i)
    x_1 = x[el].values
    ones = np.ones((x_1.shape[0], 1))
    x_2 = np.hstack((ones, x_1))
    xtx = x_2.T.dot(x_2)
    det = np.linalg.det(xtx)
    if det == 0:
        print(f"Определитель матрицы xtx для пары признаков {i} равен: {det}")
        continue
    else:
        xtx_inv = np.linalg.inv(xtx)
        b = xtx_inv.dot(x_2.T).dot(y)
        b_dict[i] = b
        z = x_2.dot(b)
        r2 = 1 - ((y - z) ** 2).sum() / sum_of_squares(y)
        combination_dict[i] = r2.tolist()[0]
print("Коэффициенты детерминации для разных сочетаний двух признаков:\n", combination_dict)
max_r2 = max(combination_dict.values())
best_combination = 0
for key, value in combination_dict.items():
    if value == max_r2:
        best_combination = key
        break
    else:
        continue
b0, b1, b2 = list(b_dict[best_combination])
print(f"Максимальное значение коэффициента детерминации для разных комбинаций признаков составляет: {max_r2}\n"
      f"Модель линейной регрессии дает наилучший результатна на признаках с индексами: {best_combination}\n"
      f"Модель регрессии на указанных признаках имеет вид: у = {b0[0]} + {b1[0]} * x1 + {b2[0]} * x2")
n = x.shape[0]
m = 2
k1 = m
k2 = n - m - 1
alpha = 0.05
t = stats.f.ppf(1 - alpha, k1, k2)
print(f"Критическая область: ({t}, +∞)")
f = (max_r2 / k1) / ((1 - max_r2) / k2)
print(f"Коэффициент Фишера для данной модели: {f}. Статистика попадает в критическую область, следовательно, "
      f"получившееся уравнение регрессии является значимым")
